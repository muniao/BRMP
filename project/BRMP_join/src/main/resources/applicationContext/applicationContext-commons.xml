<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"    
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
         xmlns:p="http://www.springframework.org/schema/p"  
         xmlns:aop="http://www.springframework.org/schema/aop"   
         xmlns:context="http://www.springframework.org/schema/context"  
         xmlns:jee="http://www.springframework.org/schema/jee"  
         xmlns:tx="http://www.springframework.org/schema/tx"
         xmlns:mvc="http://www.springframework.org/schema/mvc"  
         xsi:schemaLocation="    
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
             http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  
             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
             http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
             	">

	<!-- 启动AOP支持 -->
    <aop:aspectj-autoproxy/>
    
	<!-- 开启自动扫包 -->
	<context:component-scan base-package="com.wondersgroup">
    	<!--制定扫包规则，不扫描@Controller注解的JAVA类，其他的还是要扫描  -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>
    
	<!-- 加载jdbc.properties文件 -->
	<context:property-placeholder location="classpath:properties/*.properties" />
	
	<!--  定义数据源  -->
	<!-- Druid连接池  -->  
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <!-- 基本属性 url、user、password 根据url自动识别dbType，可以不用配置driverClassName-->  
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
        <!-- 配置初始化大小、最小空闲、最大连接数-->  
        <property name="initialSize" value="2" />  
        <property name="minIdle" value="1" />  
        <property name="maxActive" value="500" />  
        <!-- 配置获取连接等待超时的时间 单位毫秒 -->  
        <property name="maxWait" value="60000" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
        <!-- 检测连接是否有效的sql，要求是一个查询语句  -->  
        <!-- <property name="validationQuery" value="SELECT 1 FROM DUAL"/>  --> 
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" /> <!-- 申请连接时执行validationQuery检测连接是否有效,不需要检测-->  
        <property name="testOnReturn" value="false" /> <!-- 归还连接时执行validationQuery检测连接是否有效,不需要检测-->  
        <!-- 打开PSCache，在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->  
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100" />  
    </bean>
    
    <bean id="dataSource_join" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <!-- 基本属性 url、user、password 根据url自动识别dbType，可以不用配置driverClassName-->  
        <property name="driverClassName" value="${join.jdbc.driverClassName}" />
        <property name="url" value="${join.jdbc.url}" />  
        <property name="username" value="${join.jdbc.username}" />  
        <property name="password" value="${join.jdbc.password}" />  
        <!-- 配置初始化大小、最小空闲、最大连接数-->  
        <property name="initialSize" value="2" />  
        <property name="minIdle" value="1" />  
        <property name="maxActive" value="500" />  
        <!-- 配置获取连接等待超时的时间 单位毫秒 -->  
        <property name="maxWait" value="60000" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
        <!-- 检测连接是否有效的sql，要求是一个查询语句  -->  
        <!-- <property name="validationQuery" value="SELECT 1 FROM DUAL"/>   -->
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" /> <!-- 申请连接时执行validationQuery检测连接是否有效,不需要检测-->  
        <property name="testOnReturn" value="false" /> <!-- 归还连接时执行validationQuery检测连接是否有效,不需要检测-->  
        <!-- 打开PSCache，在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->  
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100" />  
    </bean>
	
	<!-- 使用springJDBC -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">  
        <constructor-arg ref="dataSource" />
    </bean>
    
    <!-- 使用springJDBC -->
	<bean id="jdbcTemplate_join" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">  
        <constructor-arg ref="dataSource_join" />
    </bean> 

	<!-- 事务管理  -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务管理  -->
	<bean id="transactionManager_join"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource_join" />
	</bean>

	<!-- 配置事务的传播特性  --> 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="push*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<!-- 那些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="allManagerMethod"
			expression="execution(* com.wondersgroup.empi.dao.impl.*.*(..))" />
		<aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice" />
	</aop:config>
    

		
	
</beans>
